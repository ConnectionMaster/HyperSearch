// -----------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by:
//        The WPF ShaderEffect Generator
//        http://wpfshadergenerator.codeplex.com
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace HscLib.ShaderEffects
{
    using System;
    using System.Windows;
    using System.Windows.Media;
    using System.Windows.Media.Effects;
    using System.Windows.Media.Media3D;
    
    
    /// <summary></summary>
    public class HueShiftEffect : System.Windows.Media.Effects.ShaderEffect
    {
        
        /// <summary>Hue shift</summary>
        public static readonly DependencyProperty HueShiftProperty = DependencyProperty.Register("HueShift", typeof(System.Double), typeof(HueShiftEffect), new PropertyMetadata((double)0, PixelShaderConstantCallback(0)));
        /// <summary></summary>
        public static readonly DependencyProperty SampProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Samp", typeof(HueShiftEffect), 0, SamplingMode.Auto);
        
        public HueShiftEffect()
        {
            PixelShader pixelShader = new PixelShader();
            pixelShader.UriSource = new Uri("/HyperSearch;component/ShaderEffects/HueShiftEffect.ps", UriKind.Relative);
            this.PixelShader = pixelShader;
            this.UpdateShaderValue(HueShiftProperty);
            this.UpdateShaderValue(SampProperty);
            this.DdxUvDdyUvRegisterIndex = -1;
        }
        
        /// <summary>Hue shift</summary>
        public virtual double HueShift
        {
            get
            {
                return ((double)(this.GetValue(HueShiftProperty)));
            }
            set
            {
                this.SetValue(HueShiftProperty, value);
            }
        }
        
        /// <summary></summary>
        public virtual System.Windows.Media.Brush Samp
        {
            get
            {
                return ((System.Windows.Media.Brush)(this.GetValue(SampProperty)));
            }
            set
            {
                this.SetValue(SampProperty, value);
            }
        }
    }
}
